/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityError'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechToTextApiV30) {
      root.SpeechToTextApiV30 = {};
    }
    root.SpeechToTextApiV30.TranscriptionProperties = factory(root.SpeechToTextApiV30.ApiClient, root.SpeechToTextApiV30.EntityError);
  }
}(this, function(ApiClient, EntityError) {
  'use strict';

  /**
   * The TranscriptionProperties model module.
   * @module model/TranscriptionProperties
   * @version v3.0
   */

  /**
   * Constructs a new <code>TranscriptionProperties</code>.
   * @alias module:model/TranscriptionProperties
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>TranscriptionProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TranscriptionProperties} obj Optional instance to populate.
   * @return {module:model/TranscriptionProperties} The populated <code>TranscriptionProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('diarizationEnabled'))
        obj.diarizationEnabled = ApiClient.convertToType(data['diarizationEnabled'], 'Boolean');
      if (data.hasOwnProperty('wordLevelTimestampsEnabled'))
        obj.wordLevelTimestampsEnabled = ApiClient.convertToType(data['wordLevelTimestampsEnabled'], 'Boolean');
      if (data.hasOwnProperty('duration'))
        obj.duration = ApiClient.convertToType(data['duration'], 'String');
      if (data.hasOwnProperty('channels'))
        obj.channels = ApiClient.convertToType(data['channels'], ['Number']);
      if (data.hasOwnProperty('destinationContainerUrl'))
        obj.destinationContainerUrl = ApiClient.convertToType(data['destinationContainerUrl'], 'String');
      if (data.hasOwnProperty('punctuationMode'))
        obj.punctuationMode = ApiClient.convertToType(data['punctuationMode'], 'String');
      if (data.hasOwnProperty('profanityFilterMode'))
        obj.profanityFilterMode = ApiClient.convertToType(data['profanityFilterMode'], 'String');
      if (data.hasOwnProperty('timeToLive'))
        obj.timeToLive = ApiClient.convertToType(data['timeToLive'], 'String');
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('error'))
        obj.error = EntityError.constructFromObject(data['error']);
    }
    return obj;
  }

  /**
   * A value indicating whether diarization (speaker separation) is requested.
   * @member {Boolean} diarizationEnabled
   */
  exports.prototype.diarizationEnabled = undefined;

  /**
   * A value indicating whether word level timestamps are requested.
   * @member {Boolean} wordLevelTimestampsEnabled
   */
  exports.prototype.wordLevelTimestampsEnabled = undefined;

  /**
   * The duration of the transcription. The duration is encoded as ISO 8601 duration  (\"PnYnMnDTnHnMnS\", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
   * @member {String} duration
   */
  exports.prototype.duration = undefined;

  /**
   * A collection of the requested channel numbers.  In the default case, the channels 0 and 1 are considered.
   * @member {Array.<Number>} channels
   */
  exports.prototype.channels = undefined;

  /**
   * The requested destination container.
   * @member {String} destinationContainerUrl
   */
  exports.prototype.destinationContainerUrl = undefined;

  /**
   * The requested punctuation mode.
   * @member {module:model/TranscriptionProperties.PunctuationModeEnum} punctuationMode
   */
  exports.prototype.punctuationMode = undefined;

  /**
   * The requested profanity filter mode.
   * @member {module:model/TranscriptionProperties.ProfanityFilterModeEnum} profanityFilterMode
   */
  exports.prototype.profanityFilterMode = undefined;

  /**
   * How long the transcription will be kept in the system. Once the transcription reaches the time to live  after completion (successful or failed) it will be automatically deleted. Not setting this value or setting  to 0 will disable automatic deletion.  The duration is encoded as ISO 8601 duration (\"PnYnMnDTnHnMnS\", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
   * @member {String} timeToLive
   */
  exports.prototype.timeToLive = undefined;

  /**
   * The email address to send email notifications to in case the operation completes.  The value will be removed after successfully sending the email.
   * @member {String} email
   */
  exports.prototype.email = undefined;

  /**
   * The details of the error in case the entity is in a failed state.
   * @member {module:model/EntityError} error
   */
  exports.prototype.error = undefined;



  /**
   * Allowed values for the <code>punctuationMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PunctuationModeEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "Dictated"
     * @const
     */
    dictated: "Dictated",

    /**
     * value: "Automatic"
     * @const
     */
    automatic: "Automatic",

    /**
     * value: "DictatedAndAutomatic"
     * @const
     */
    dictatedAndAutomatic: "DictatedAndAutomatic"
  };


  /**
   * Allowed values for the <code>profanityFilterMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProfanityFilterModeEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "Removed"
     * @const
     */
    removed: "Removed",

    /**
     * value: "Tags"
     * @const
     */
    tags: "Tags",

    /**
     * value: "Masked"
     * @const
     */
    masked: "Masked"
  };

  return exports;

}));
