/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechToTextApiV30);
  }
}(this, function(expect, SpeechToTextApiV30) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ManagementModel', function() {
      beforeEach(function() {
        instance = new SpeechToTextApiV30.ManagementModel();
      });

      it('should create an instance of ManagementModel', function() {
        // TODO: update the code to test ManagementModel
        expect(instance).to.be.a(SpeechToTextApiV30.ManagementModel);
      });

      it('should have the property subscriptionId (base name: "subscriptionId")', function() {
        // TODO: update the code to test the property subscriptionId
        expect(instance).to.have.property('subscriptionId');
        // expect(instance.subscriptionId).to.be(expectedValueLiteral);
      });

      it('should have the property kind (base name: "kind")', function() {
        // TODO: update the code to test the property kind
        expect(instance).to.have.property('kind');
        // expect(instance.kind).to.be(expectedValueLiteral);
      });

      it('should have the property acousticModel (base name: "acousticModel")', function() {
        // TODO: update the code to test the property acousticModel
        expect(instance).to.have.property('acousticModel');
        // expect(instance.acousticModel).to.be(expectedValueLiteral);
      });

      it('should have the property languageModel (base name: "languageModel")', function() {
        // TODO: update the code to test the property languageModel
        expect(instance).to.have.property('languageModel');
        // expect(instance.languageModel).to.be(expectedValueLiteral);
      });

      it('should have the property hideOnV2Api (base name: "hideOnV2Api")', function() {
        // TODO: update the code to test the property hideOnV2Api
        expect(instance).to.have.property('hideOnV2Api');
        // expect(instance.hideOnV2Api).to.be(expectedValueLiteral);
      });

      it('should have the property permissions (base name: "permissions")', function() {
        // TODO: update the code to test the property permissions
        expect(instance).to.have.property('permissions');
        // expect(instance.permissions).to.be(expectedValueLiteral);
      });

      it('should have the property internalProperties (base name: "internalProperties")', function() {
        // TODO: update the code to test the property internalProperties
        expect(instance).to.have.property('internalProperties');
        // expect(instance.internalProperties).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property properties (base name: "properties")', function() {
        // TODO: update the code to test the property properties
        expect(instance).to.have.property('properties');
        // expect(instance.properties).to.be(expectedValueLiteral);
      });

      it('should have the property self (base name: "self")', function() {
        // TODO: update the code to test the property self
        expect(instance).to.have.property('self');
        // expect(instance.self).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property baseModel (base name: "baseModel")', function() {
        // TODO: update the code to test the property baseModel
        expect(instance).to.have.property('baseModel');
        // expect(instance.baseModel).to.be(expectedValueLiteral);
      });

      it('should have the property datasets (base name: "datasets")', function() {
        // TODO: update the code to test the property datasets
        expect(instance).to.have.property('datasets');
        // expect(instance.datasets).to.be(expectedValueLiteral);
      });

      it('should have the property locale (base name: "locale")', function() {
        // TODO: update the code to test the property locale
        expect(instance).to.have.property('locale');
        // expect(instance.locale).to.be(expectedValueLiteral);
      });

      it('should have the property lastActionDateTime (base name: "lastActionDateTime")', function() {
        // TODO: update the code to test the property lastActionDateTime
        expect(instance).to.have.property('lastActionDateTime');
        // expect(instance.lastActionDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property createdDateTime (base name: "createdDateTime")', function() {
        // TODO: update the code to test the property createdDateTime
        expect(instance).to.have.property('createdDateTime');
        // expect(instance.createdDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property customProperties (base name: "customProperties")', function() {
        // TODO: update the code to test the property customProperties
        expect(instance).to.have.property('customProperties');
        // expect(instance.customProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
