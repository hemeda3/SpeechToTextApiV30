/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechToTextApiV30);
  }
}(this, function(expect, SpeechToTextApiV30) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpeechToTextApiV30.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('copyModelToSubscription', function() {
        it('should call copyModelToSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for copyModelToSubscription call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.modelCopy = new SpeechToTextApiV30.ModelCopy();
          opts.modelCopy.targetSubscriptionKey = "";

          instance.copyModelToSubscription(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Model);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                  expect(data.links.manifest).to.be.a('string');
              expect(data.links.manifest).to.be("");
              expect(data.links.copyTo).to.be.a('string');
              expect(data.links.copyTo).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                  expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.baseModel.self).to.be.a('string');
              expect(data.baseModel.self).to.be("");
            {
              let dataCtr = data.datasets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");

                      }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDataset', function() {
        it('should call createDataset successfully', function(done) {
          // TODO: uncomment, update parameter values for createDataset call and complete the assertions
          /*
          var opts = {};
          opts.dataset = new SpeechToTextApiV30.Dataset();
          opts.dataset.properties = new SpeechToTextApiV30.DatasetProperties();
          opts.dataset.properties.email = "";
          opts.dataset.kind = "Language";
          opts.dataset.displayName = "";
          opts.dataset.description = "";
          opts.dataset.project = new SpeechToTextApiV30.EntityReference();
          opts.dataset.project.self = "";
          opts.dataset.contentUrl = "";
          opts.dataset.customProperties = {key: ""};
          opts.dataset.locale = "";

          instance.createDataset(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Dataset);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("Language");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createEndpoint', function() {
        it('should call createEndpoint successfully', function(done) {
          // TODO: uncomment, update parameter values for createEndpoint call and complete the assertions
          /*
          var opts = {};
          opts.endpoint = new SpeechToTextApiV30.Endpoint();
          opts.endpoint.project = new SpeechToTextApiV30.EntityReference();
          opts.endpoint.project.self = "";
          opts.endpoint.properties = new SpeechToTextApiV30.EndpointProperties();
          opts.endpoint.properties.loggingEnabled = false;
          opts.endpoint.properties.timeToLive = "";
          opts.endpoint.properties.email = "";
          opts.endpoint.displayName = "";
          opts.endpoint.description = "";
          opts.endpoint.text = "";
          opts.endpoint.model = new SpeechToTextApiV30.EntityReference();
          opts.endpoint.model.self = "";
          opts.endpoint.locale = "";
          opts.endpoint.customProperties = {key: ""};

          instance.createEndpoint(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Endpoint);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.EndpointLinks);
                  expect(data.links.restInteractive).to.be.a('string');
              expect(data.links.restInteractive).to.be("");
              expect(data.links.restConversation).to.be.a('string');
              expect(data.links.restConversation).to.be("");
              expect(data.links.restDictation).to.be.a('string');
              expect(data.links.restDictation).to.be("");
              expect(data.links.webSocketInteractive).to.be.a('string');
              expect(data.links.webSocketInteractive).to.be("");
              expect(data.links.webSocketConversation).to.be.a('string');
              expect(data.links.webSocketConversation).to.be("");
              expect(data.links.webSocketDictation).to.be.a('string');
              expect(data.links.webSocketDictation).to.be("");
              expect(data.links.logs).to.be.a('string');
              expect(data.links.logs).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createEvaluation', function() {
        it('should call createEvaluation successfully', function(done) {
          // TODO: uncomment, update parameter values for createEvaluation call and complete the assertions
          /*
          var opts = {};
          opts.evaluation = new SpeechToTextApiV30.Evaluation();
          opts.evaluation.model1 = new SpeechToTextApiV30.EntityReference();
          opts.evaluation.model1.self = "";
          opts.evaluation.model2 = new SpeechToTextApiV30.EntityReference();
          opts.evaluation.model2.self = "";
          opts.evaluation.dataset = new SpeechToTextApiV30.EntityReference();
          opts.evaluation.dataset.self = "";
          opts.evaluation.project = new SpeechToTextApiV30.EntityReference();
          opts.evaluation.project.self = "";
          opts.evaluation.displayName = "";
          opts.evaluation.description = "";
          opts.evaluation.customProperties = {key: ""};
          opts.evaluation.locale = "";

          instance.createEvaluation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Evaluation);
            expect(data.model1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EvaluationProperties);
                  expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createHook', function() {
        it('should call createHook successfully', function(done) {
          // TODO: uncomment, update parameter values for createHook call and complete the assertions
          /*
          var opts = {};
          opts.webHook = new SpeechToTextApiV30.WebHook();
          opts.webHook.properties = new SpeechToTextApiV30.WebHookProperties();
          opts.webHook.properties.secret = "";
          opts.webHook.displayName = "";
          opts.webHook.description = "";
          opts.webHook.webUrl = "";
          opts.webHook.events = ;
          opts.webHook.customProperties = {key: ""};

          instance.createHook(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.WebHook);
            expect(data.links).to.be.a(SpeechToTextApiV30.WebHookLinks);
                  expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");
              expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.WebHookProperties);
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(Object);
            expect(data.events).to.be();
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModel', function() {
        it('should call createModel successfully', function(done) {
          // TODO: uncomment, update parameter values for createModel call and complete the assertions
          /*
          var opts = {};
          opts.model = new SpeechToTextApiV30.Model();
          opts.model.project = new SpeechToTextApiV30.EntityReference();
          opts.model.project.self = "";
          opts.model.properties = new SpeechToTextApiV30.ModelProperties();
          opts.model.properties.email = "";
          opts.model.displayName = "";
          opts.model.description = "";
          opts.model.text = "";
          opts.model.baseModel = new SpeechToTextApiV30.EntityReference();
          opts.model.baseModel.self = "";
          opts.model.datasets = [new SpeechToTextApiV30.EntityReference()];
          opts.model.datasets[0].self = "";
          opts.model.locale = "";
          opts.model.customProperties = {key: ""};

          instance.createModel(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Model);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                  expect(data.links.manifest).to.be.a('string');
              expect(data.links.manifest).to.be("");
              expect(data.links.copyTo).to.be.a('string');
              expect(data.links.copyTo).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                  expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.baseModel.self).to.be.a('string');
              expect(data.baseModel.self).to.be("");
            {
              let dataCtr = data.datasets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");

                      }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createProject', function() {
        it('should call createProject successfully', function(done) {
          // TODO: uncomment, update parameter values for createProject call and complete the assertions
          /*
          var opts = {};
          opts.project = new SpeechToTextApiV30.Project();
          opts.project.displayName = "";
          opts.project.description = "";
          opts.project.locale = "";
          opts.project.customProperties = {key: ""};

          instance.createProject(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Project);
            expect(data.links).to.be.a(SpeechToTextApiV30.ProjectLinks);
                  expect(data.links.evaluations).to.be.a('string');
              expect(data.links.evaluations).to.be("");
              expect(data.links.datasets).to.be.a('string');
              expect(data.links.datasets).to.be("");
              expect(data.links.models).to.be.a('string');
              expect(data.links.models).to.be("");
              expect(data.links.endpoints).to.be.a('string');
              expect(data.links.endpoints).to.be("");
              expect(data.links.transcriptions).to.be.a('string');
              expect(data.links.transcriptions).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ProjectProperties);
                  expect(data.properties.datasetCount).to.be.a('number');
              expect(data.properties.datasetCount).to.be(0);
              expect(data.properties.evaluationCount).to.be.a('number');
              expect(data.properties.evaluationCount).to.be(0);
              expect(data.properties.modelCount).to.be.a('number');
              expect(data.properties.modelCount).to.be(0);
              expect(data.properties.transcriptionCount).to.be.a('number');
              expect(data.properties.transcriptionCount).to.be(0);
              expect(data.properties.endpointCount).to.be.a('number');
              expect(data.properties.endpointCount).to.be(0);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTranscription', function() {
        it('should call createTranscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createTranscription call and complete the assertions
          /*
          var opts = {};
          opts.transcription = new SpeechToTextApiV30.Transcription();
          opts.transcription.properties = new SpeechToTextApiV30.TranscriptionProperties();
          opts.transcription.properties.diarizationEnabled = false;
          opts.transcription.properties.wordLevelTimestampsEnabled = false;
          opts.transcription.properties.channels = [0];
          opts.transcription.properties.destinationContainerUrl = "";
          opts.transcription.properties.punctuationMode = "None";
          opts.transcription.properties.profanityFilterMode = "None";
          opts.transcription.properties.timeToLive = "";
          opts.transcription.properties.email = "";
          opts.transcription.model = new SpeechToTextApiV30.EntityReference();
          opts.transcription.model.self = "";
          opts.transcription.project = new SpeechToTextApiV30.EntityReference();
          opts.transcription.project.self = "";
          opts.transcription.dataset = new SpeechToTextApiV30.EntityReference();
          opts.transcription.dataset.self = "";
          opts.transcription.contentUrls = [""];
          opts.transcription.contentContainerUrl = "";
          opts.transcription.displayName = "";
          opts.transcription.description = "";
          opts.transcription.customProperties = {key: ""};
          opts.transcription.locale = "";

          instance.createTranscription(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Transcription);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.TranscriptionProperties);
                  expect(data.properties.diarizationEnabled).to.be.a('boolean');
              expect(data.properties.diarizationEnabled).to.be(false);
              expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.punctuationMode).to.be.a('string');
              expect(data.properties.punctuationMode).to.be("None");
              expect(data.properties.profanityFilterMode).to.be.a('string');
              expect(data.properties.profanityFilterMode).to.be("None");
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBaseModelLog', function() {
        it('should call deleteBaseModelLog successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBaseModelLog call
          /*
          var locale = "locale_example";
          var logId = "logId_example";

          instance.deleteBaseModelLog(locale, logId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBaseModelLogs', function() {
        it('should call deleteBaseModelLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBaseModelLogs call
          /*
          var locale = "locale_example";
          var opts = {};
          opts.endDate = "endDate_example";

          instance.deleteBaseModelLogs(locale, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDataset', function() {
        it('should call deleteDataset successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDataset call
          /*
          var id = "id_example";

          instance.deleteDataset(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEndpoint', function() {
        it('should call deleteEndpoint successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEndpoint call
          /*
          var id = "id_example";

          instance.deleteEndpoint(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEndpointLog', function() {
        it('should call deleteEndpointLog successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEndpointLog call
          /*
          var id = "id_example";
          var logId = "logId_example";

          instance.deleteEndpointLog(id, logId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEndpointLogs', function() {
        it('should call deleteEndpointLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEndpointLogs call
          /*
          var id = "id_example";
          var opts = {};
          opts.endDate = "endDate_example";

          instance.deleteEndpointLogs(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEvaluation', function() {
        it('should call deleteEvaluation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEvaluation call
          /*
          var id = "id_example";

          instance.deleteEvaluation(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteHook', function() {
        it('should call deleteHook successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteHook call
          /*
          var id = "id_example";

          instance.deleteHook(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModel', function() {
        it('should call deleteModel successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModel call
          /*
          var id = "id_example";

          instance.deleteModel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProject', function() {
        it('should call deleteProject successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProject call
          /*
          var id = "id_example";

          instance.deleteProject(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTranscription', function() {
        it('should call deleteTranscription successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTranscription call
          /*
          var id = "id_example";

          instance.deleteTranscription(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaseModel', function() {
        it('should call getBaseModel successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaseModel call and complete the assertions
          /*
          var id = "id_example";

          instance.getBaseModel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Model);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                  expect(data.links.manifest).to.be.a('string');
              expect(data.links.manifest).to.be("");
              expect(data.links.copyTo).to.be.a('string');
              expect(data.links.copyTo).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                  expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.baseModel.self).to.be.a('string');
              expect(data.baseModel.self).to.be("");
            {
              let dataCtr = data.datasets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");

                      }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaseModelLog', function() {
        it('should call getBaseModelLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaseModelLog call and complete the assertions
          /*
          var locale = "locale_example";
          var logId = "logId_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getBaseModelLog(locale, logId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaseModelLogs', function() {
        it('should call getBaseModelLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaseModelLogs call and complete the assertions
          /*
          var locale = "locale_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;
          opts.skipToken = "skipToken_example";
          opts.top = 56;

          instance.getBaseModelLogs(locale, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaseModelManifest', function() {
        it('should call getBaseModelManifest successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaseModelManifest call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getBaseModelManifest(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ModelManifest);
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            {
              let dataCtr = data.modelFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.ModelFile);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaseModels', function() {
        it('should call getBaseModels successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaseModels call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getBaseModels(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedModels);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Model);
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                      expect(data.links.manifest).to.be.a('string');
                  expect(data.links.manifest).to.be("");
                  expect(data.links.copyTo).to.be.a('string');
                  expect(data.links.copyTo).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                      expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                        expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.baseModel.self).to.be.a('string');
                  expect(data.baseModel.self).to.be("");
                {
                  let dataCtr = data.datasets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataset', function() {
        it('should call getDataset successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataset call and complete the assertions
          /*
          var id = "id_example";

          instance.getDataset(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Dataset);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("Language");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasetFile', function() {
        it('should call getDatasetFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasetFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getDatasetFile(id, fileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasetFiles', function() {
        it('should call getDatasetFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasetFiles call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;
          opts.skip = 56;
          opts.top = 56;

          instance.getDatasetFiles(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasets', function() {
        it('should call getDatasets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasets call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getDatasets(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedDatasets);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Dataset);
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                      expect(data.properties.acceptedLineCount).to.be.a('number');
                  expect(data.properties.acceptedLineCount).to.be(0);
                  expect(data.properties.rejectedLineCount).to.be.a('number');
                  expect(data.properties.rejectedLineCount).to.be(0);
                  expect(data.properties.duration).to.be.a('string');
                  expect(data.properties.duration).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("Language");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDatasetsForProject', function() {
        it('should call getDatasetsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getDatasetsForProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getDatasetsForProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedDatasets);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Dataset);
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                      expect(data.properties.acceptedLineCount).to.be.a('number');
                  expect(data.properties.acceptedLineCount).to.be(0);
                  expect(data.properties.rejectedLineCount).to.be.a('number');
                  expect(data.properties.rejectedLineCount).to.be(0);
                  expect(data.properties.duration).to.be.a('string');
                  expect(data.properties.duration).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("Language");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndpoint', function() {
        it('should call getEndpoint successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndpoint call and complete the assertions
          /*
          var id = "id_example";

          instance.getEndpoint(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Endpoint);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.EndpointLinks);
                  expect(data.links.restInteractive).to.be.a('string');
              expect(data.links.restInteractive).to.be("");
              expect(data.links.restConversation).to.be.a('string');
              expect(data.links.restConversation).to.be("");
              expect(data.links.restDictation).to.be.a('string');
              expect(data.links.restDictation).to.be("");
              expect(data.links.webSocketInteractive).to.be.a('string');
              expect(data.links.webSocketInteractive).to.be("");
              expect(data.links.webSocketConversation).to.be.a('string');
              expect(data.links.webSocketConversation).to.be("");
              expect(data.links.webSocketDictation).to.be.a('string');
              expect(data.links.webSocketDictation).to.be("");
              expect(data.links.logs).to.be.a('string');
              expect(data.links.logs).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndpointLog', function() {
        it('should call getEndpointLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndpointLog call and complete the assertions
          /*
          var id = "id_example";
          var logId = "logId_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getEndpointLog(id, logId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndpointLogs', function() {
        it('should call getEndpointLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndpointLogs call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;
          opts.skipToken = "skipToken_example";
          opts.top = 56;

          instance.getEndpointLogs(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndpoints', function() {
        it('should call getEndpoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndpoints call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getEndpoints(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedEndpoints);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Endpoint);
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.EndpointLinks);
                      expect(data.links.restInteractive).to.be.a('string');
                  expect(data.links.restInteractive).to.be("");
                  expect(data.links.restConversation).to.be.a('string');
                  expect(data.links.restConversation).to.be("");
                  expect(data.links.restDictation).to.be.a('string');
                  expect(data.links.restDictation).to.be("");
                  expect(data.links.webSocketInteractive).to.be.a('string');
                  expect(data.links.webSocketInteractive).to.be("");
                  expect(data.links.webSocketConversation).to.be.a('string');
                  expect(data.links.webSocketConversation).to.be("");
                  expect(data.links.webSocketDictation).to.be.a('string');
                  expect(data.links.webSocketDictation).to.be("");
                  expect(data.links.logs).to.be.a('string');
                  expect(data.links.logs).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.EndpointProperties);
                      expect(data.properties.loggingEnabled).to.be.a('boolean');
                  expect(data.properties.loggingEnabled).to.be(false);
                  expect(data.properties.timeToLive).to.be.a('string');
                  expect(data.properties.timeToLive).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndpointsForProject', function() {
        it('should call getEndpointsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndpointsForProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getEndpointsForProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedEndpoints);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Endpoint);
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.EndpointLinks);
                      expect(data.links.restInteractive).to.be.a('string');
                  expect(data.links.restInteractive).to.be("");
                  expect(data.links.restConversation).to.be.a('string');
                  expect(data.links.restConversation).to.be("");
                  expect(data.links.restDictation).to.be.a('string');
                  expect(data.links.restDictation).to.be("");
                  expect(data.links.webSocketInteractive).to.be.a('string');
                  expect(data.links.webSocketInteractive).to.be("");
                  expect(data.links.webSocketConversation).to.be.a('string');
                  expect(data.links.webSocketConversation).to.be("");
                  expect(data.links.webSocketDictation).to.be.a('string');
                  expect(data.links.webSocketDictation).to.be("");
                  expect(data.links.logs).to.be.a('string');
                  expect(data.links.logs).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.EndpointProperties);
                      expect(data.properties.loggingEnabled).to.be.a('boolean');
                  expect(data.properties.loggingEnabled).to.be(false);
                  expect(data.properties.timeToLive).to.be.a('string');
                  expect(data.properties.timeToLive).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvaluation', function() {
        it('should call getEvaluation successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluation call and complete the assertions
          /*
          var id = "id_example";

          instance.getEvaluation(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Evaluation);
            expect(data.model1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EvaluationProperties);
                  expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvaluationFile', function() {
        it('should call getEvaluationFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluationFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getEvaluationFile(id, fileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvaluationFiles', function() {
        it('should call getEvaluationFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluationFiles call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;
          opts.skip = 56;
          opts.top = 56;

          instance.getEvaluationFiles(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvaluations', function() {
        it('should call getEvaluations successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluations call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getEvaluations(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedEvaluations);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Evaluation);
                expect(data.model1).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model1.self).to.be.a('string');
                  expect(data.model1.self).to.be("");
                expect(data.model2).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model2.self).to.be.a('string');
                  expect(data.model2.self).to.be("");
                expect(data.transcription1).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.transcription1.self).to.be.a('string');
                  expect(data.transcription1.self).to.be("");
                expect(data.transcription2).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.transcription2.self).to.be.a('string');
                  expect(data.transcription2.self).to.be("");
                expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.EvaluationProperties);
                      expect(data.properties.wordErrorRate2).to.be.a('number');
                  expect(data.properties.wordErrorRate2).to.be(0.0);
                  expect(data.properties.wordErrorRate1).to.be.a('number');
                  expect(data.properties.wordErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceErrorRate2).to.be.a('number');
                  expect(data.properties.sentenceErrorRate2).to.be(0.0);
                  expect(data.properties.sentenceCount2).to.be.a('number');
                  expect(data.properties.sentenceCount2).to.be(0);
                  expect(data.properties.wordCount2).to.be.a('number');
                  expect(data.properties.wordCount2).to.be(0);
                  expect(data.properties.correctWordCount2).to.be.a('number');
                  expect(data.properties.correctWordCount2).to.be(0);
                  expect(data.properties.wordSubstitutionCount2).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount2).to.be(0);
                  expect(data.properties.wordDeletionCount2).to.be.a('number');
                  expect(data.properties.wordDeletionCount2).to.be(0);
                  expect(data.properties.wordInsertionCount2).to.be.a('number');
                  expect(data.properties.wordInsertionCount2).to.be(0);
                  expect(data.properties.sentenceErrorRate1).to.be.a('number');
                  expect(data.properties.sentenceErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceCount1).to.be.a('number');
                  expect(data.properties.sentenceCount1).to.be(0);
                  expect(data.properties.wordCount1).to.be.a('number');
                  expect(data.properties.wordCount1).to.be(0);
                  expect(data.properties.correctWordCount1).to.be.a('number');
                  expect(data.properties.correctWordCount1).to.be(0);
                  expect(data.properties.wordSubstitutionCount1).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount1).to.be(0);
                  expect(data.properties.wordDeletionCount1).to.be.a('number');
                  expect(data.properties.wordDeletionCount1).to.be(0);
                  expect(data.properties.wordInsertionCount1).to.be.a('number');
                  expect(data.properties.wordInsertionCount1).to.be(0);
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvaluationsForProject', function() {
        it('should call getEvaluationsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluationsForProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getEvaluationsForProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedEvaluations);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Evaluation);
                expect(data.model1).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model1.self).to.be.a('string');
                  expect(data.model1.self).to.be("");
                expect(data.model2).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model2.self).to.be.a('string');
                  expect(data.model2.self).to.be("");
                expect(data.transcription1).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.transcription1.self).to.be.a('string');
                  expect(data.transcription1.self).to.be("");
                expect(data.transcription2).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.transcription2.self).to.be.a('string');
                  expect(data.transcription2.self).to.be("");
                expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.EvaluationProperties);
                      expect(data.properties.wordErrorRate2).to.be.a('number');
                  expect(data.properties.wordErrorRate2).to.be(0.0);
                  expect(data.properties.wordErrorRate1).to.be.a('number');
                  expect(data.properties.wordErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceErrorRate2).to.be.a('number');
                  expect(data.properties.sentenceErrorRate2).to.be(0.0);
                  expect(data.properties.sentenceCount2).to.be.a('number');
                  expect(data.properties.sentenceCount2).to.be(0);
                  expect(data.properties.wordCount2).to.be.a('number');
                  expect(data.properties.wordCount2).to.be(0);
                  expect(data.properties.correctWordCount2).to.be.a('number');
                  expect(data.properties.correctWordCount2).to.be(0);
                  expect(data.properties.wordSubstitutionCount2).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount2).to.be(0);
                  expect(data.properties.wordDeletionCount2).to.be.a('number');
                  expect(data.properties.wordDeletionCount2).to.be(0);
                  expect(data.properties.wordInsertionCount2).to.be.a('number');
                  expect(data.properties.wordInsertionCount2).to.be(0);
                  expect(data.properties.sentenceErrorRate1).to.be.a('number');
                  expect(data.properties.sentenceErrorRate1).to.be(0.0);
                  expect(data.properties.sentenceCount1).to.be.a('number');
                  expect(data.properties.sentenceCount1).to.be(0);
                  expect(data.properties.wordCount1).to.be.a('number');
                  expect(data.properties.wordCount1).to.be(0);
                  expect(data.properties.correctWordCount1).to.be.a('number');
                  expect(data.properties.correctWordCount1).to.be(0);
                  expect(data.properties.wordSubstitutionCount1).to.be.a('number');
                  expect(data.properties.wordSubstitutionCount1).to.be(0);
                  expect(data.properties.wordDeletionCount1).to.be.a('number');
                  expect(data.properties.wordDeletionCount1).to.be(0);
                  expect(data.properties.wordInsertionCount1).to.be.a('number');
                  expect(data.properties.wordInsertionCount1).to.be(0);
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHealthStatus', function() {
        it('should call getHealthStatus successfully', function(done) {
          // TODO: uncomment getHealthStatus call and complete the assertions
          /*

          instance.getHealthStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.HealthStatus);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Healthy");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.components;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Component);
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("Healthy");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHook', function() {
        it('should call getHook successfully', function(done) {
          // TODO: uncomment, update parameter values for getHook call and complete the assertions
          /*
          var id = "id_example";

          instance.getHook(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.WebHook);
            expect(data.links).to.be.a(SpeechToTextApiV30.WebHookLinks);
                  expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");
              expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.WebHookProperties);
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(Object);
            expect(data.events).to.be();
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHooks', function() {
        it('should call getHooks successfully', function(done) {
          // TODO: uncomment, update parameter values for getHooks call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getHooks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedWebHooks);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.WebHook);
                expect(data.links).to.be.a(SpeechToTextApiV30.WebHookLinks);
                      expect(data.links.ping).to.be.a('string');
                  expect(data.links.ping).to.be("");
                  expect(data.links.test).to.be.a('string');
                  expect(data.links.test).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.WebHookProperties);
                      expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                  expect(data.properties.apiVersion).to.be.a('string');
                  expect(data.properties.apiVersion).to.be("");
                  expect(data.properties.secret).to.be.a('string');
                  expect(data.properties.secret).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.webUrl).to.be.a('string');
                expect(data.webUrl).to.be("");
                expect(data.events).to.be.a(Object);
                expect(data.events).to.be();
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModel', function() {
        it('should call getModel successfully', function(done) {
          // TODO: uncomment, update parameter values for getModel call and complete the assertions
          /*
          var id = "id_example";

          instance.getModel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Model);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                  expect(data.links.manifest).to.be.a('string');
              expect(data.links.manifest).to.be("");
              expect(data.links.copyTo).to.be.a('string');
              expect(data.links.copyTo).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                  expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.baseModel.self).to.be.a('string');
              expect(data.baseModel.self).to.be("");
            {
              let dataCtr = data.datasets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");

                      }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelManifest', function() {
        it('should call getModelManifest successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelManifest call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getModelManifest(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ModelManifest);
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            {
              let dataCtr = data.modelFiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.ModelFile);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.contentUrl).to.be.a('string');
                expect(data.contentUrl).to.be("");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModels', function() {
        it('should call getModels successfully', function(done) {
          // TODO: uncomment, update parameter values for getModels call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getModels(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedModels);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Model);
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                      expect(data.links.manifest).to.be.a('string');
                  expect(data.links.manifest).to.be("");
                  expect(data.links.copyTo).to.be.a('string');
                  expect(data.links.copyTo).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                      expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                        expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.baseModel.self).to.be.a('string');
                  expect(data.baseModel.self).to.be("");
                {
                  let dataCtr = data.datasets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelsForProject', function() {
        it('should call getModelsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelsForProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getModelsForProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedModels);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Model);
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                      expect(data.links.manifest).to.be.a('string');
                  expect(data.links.manifest).to.be("");
                  expect(data.links.copyTo).to.be.a('string');
                  expect(data.links.copyTo).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                      expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                        expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                    expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.baseModel.self).to.be.a('string');
                  expect(data.baseModel.self).to.be("");
                {
                  let dataCtr = data.datasets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                    expect(data.self).to.be.a('string');
                    expect(data.self).to.be("");
    
                          }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProject', function() {
        it('should call getProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getProject call and complete the assertions
          /*
          var id = "id_example";

          instance.getProject(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Project);
            expect(data.links).to.be.a(SpeechToTextApiV30.ProjectLinks);
                  expect(data.links.evaluations).to.be.a('string');
              expect(data.links.evaluations).to.be("");
              expect(data.links.datasets).to.be.a('string');
              expect(data.links.datasets).to.be("");
              expect(data.links.models).to.be.a('string');
              expect(data.links.models).to.be("");
              expect(data.links.endpoints).to.be.a('string');
              expect(data.links.endpoints).to.be("");
              expect(data.links.transcriptions).to.be.a('string');
              expect(data.links.transcriptions).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ProjectProperties);
                  expect(data.properties.datasetCount).to.be.a('number');
              expect(data.properties.datasetCount).to.be(0);
              expect(data.properties.evaluationCount).to.be.a('number');
              expect(data.properties.evaluationCount).to.be(0);
              expect(data.properties.modelCount).to.be.a('number');
              expect(data.properties.modelCount).to.be(0);
              expect(data.properties.transcriptionCount).to.be.a('number');
              expect(data.properties.transcriptionCount).to.be(0);
              expect(data.properties.endpointCount).to.be.a('number');
              expect(data.properties.endpointCount).to.be(0);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjects', function() {
        it('should call getProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjects call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getProjects(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedProjects);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Project);
                expect(data.links).to.be.a(SpeechToTextApiV30.ProjectLinks);
                      expect(data.links.evaluations).to.be.a('string');
                  expect(data.links.evaluations).to.be("");
                  expect(data.links.datasets).to.be.a('string');
                  expect(data.links.datasets).to.be("");
                  expect(data.links.models).to.be.a('string');
                  expect(data.links.models).to.be("");
                  expect(data.links.endpoints).to.be.a('string');
                  expect(data.links.endpoints).to.be("");
                  expect(data.links.transcriptions).to.be.a('string');
                  expect(data.links.transcriptions).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.ProjectProperties);
                      expect(data.properties.datasetCount).to.be.a('number');
                  expect(data.properties.datasetCount).to.be(0);
                  expect(data.properties.evaluationCount).to.be.a('number');
                  expect(data.properties.evaluationCount).to.be(0);
                  expect(data.properties.modelCount).to.be.a('number');
                  expect(data.properties.modelCount).to.be(0);
                  expect(data.properties.transcriptionCount).to.be.a('number');
                  expect(data.properties.transcriptionCount).to.be(0);
                  expect(data.properties.endpointCount).to.be.a('number');
                  expect(data.properties.endpointCount).to.be(0);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedLocalesForDatasets', function() {
        it('should call getSupportedLocalesForDatasets successfully', function(done) {
          // TODO: uncomment getSupportedLocalesForDatasets call and complete the assertions
          /*

          instance.getSupportedLocalesForDatasets(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedLocalesForEndpoints', function() {
        it('should call getSupportedLocalesForEndpoints successfully', function(done) {
          // TODO: uncomment getSupportedLocalesForEndpoints call and complete the assertions
          /*

          instance.getSupportedLocalesForEndpoints(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedLocalesForEvaluations', function() {
        it('should call getSupportedLocalesForEvaluations successfully', function(done) {
          // TODO: uncomment getSupportedLocalesForEvaluations call and complete the assertions
          /*

          instance.getSupportedLocalesForEvaluations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedLocalesForModels', function() {
        it('should call getSupportedLocalesForModels successfully', function(done) {
          // TODO: uncomment getSupportedLocalesForModels call and complete the assertions
          /*

          instance.getSupportedLocalesForModels(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedLocalesForTranscriptions', function() {
        it('should call getSupportedLocalesForTranscriptions successfully', function(done) {
          // TODO: uncomment getSupportedLocalesForTranscriptions call and complete the assertions
          /*

          instance.getSupportedLocalesForTranscriptions(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedProjectLocales', function() {
        it('should call getSupportedProjectLocales successfully', function(done) {
          // TODO: uncomment getSupportedProjectLocales call and complete the assertions
          /*

          instance.getSupportedProjectLocales(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTranscription', function() {
        it('should call getTranscription successfully', function(done) {
          // TODO: uncomment, update parameter values for getTranscription call and complete the assertions
          /*
          var id = "id_example";

          instance.getTranscription(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Transcription);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.TranscriptionProperties);
                  expect(data.properties.diarizationEnabled).to.be.a('boolean');
              expect(data.properties.diarizationEnabled).to.be(false);
              expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.punctuationMode).to.be.a('string');
              expect(data.properties.punctuationMode).to.be("None");
              expect(data.properties.profanityFilterMode).to.be.a('string');
              expect(data.properties.profanityFilterMode).to.be("None");
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTranscriptionFile', function() {
        it('should call getTranscriptionFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getTranscriptionFile call and complete the assertions
          /*
          var id = "id_example";
          var fileId = "fileId_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;

          instance.getTranscriptionFile(id, fileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTranscriptionFiles', function() {
        it('should call getTranscriptionFiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getTranscriptionFiles call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.sasValidityInSeconds = 56;
          opts.skip = 56;
          opts.top = 56;

          instance.getTranscriptionFiles(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedFiles);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTranscriptions', function() {
        it('should call getTranscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getTranscriptions call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getTranscriptions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedTranscriptions);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Transcription);
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.TranscriptionProperties);
                      expect(data.properties.diarizationEnabled).to.be.a('boolean');
                  expect(data.properties.diarizationEnabled).to.be(false);
                  expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
                  expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
                  expect(data.properties.duration).to.be.a('string');
                  expect(data.properties.duration).to.be("");
                  {
                    let dataCtr = data.properties.channels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.properties.destinationContainerUrl).to.be.a('string');
                  expect(data.properties.destinationContainerUrl).to.be("");
                  expect(data.properties.punctuationMode).to.be.a('string');
                  expect(data.properties.punctuationMode).to.be("None");
                  expect(data.properties.profanityFilterMode).to.be.a('string');
                  expect(data.properties.profanityFilterMode).to.be("None");
                  expect(data.properties.timeToLive).to.be.a('string');
                  expect(data.properties.timeToLive).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                {
                  let dataCtr = data.contentUrls;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.contentContainerUrl).to.be.a('string');
                expect(data.contentContainerUrl).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTranscriptionsForProject', function() {
        it('should call getTranscriptionsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getTranscriptionsForProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.skip = 56;
          opts.top = 56;

          instance.getTranscriptionsForProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.PaginatedTranscriptions);
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.Transcription);
                expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                      expect(data.links.files).to.be.a('string');
                  expect(data.links.files).to.be("");
                expect(data.properties).to.be.a(SpeechToTextApiV30.TranscriptionProperties);
                      expect(data.properties.diarizationEnabled).to.be.a('boolean');
                  expect(data.properties.diarizationEnabled).to.be(false);
                  expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
                  expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
                  expect(data.properties.duration).to.be.a('string');
                  expect(data.properties.duration).to.be("");
                  {
                    let dataCtr = data.properties.channels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.properties.destinationContainerUrl).to.be.a('string');
                  expect(data.properties.destinationContainerUrl).to.be("");
                  expect(data.properties.punctuationMode).to.be.a('string');
                  expect(data.properties.punctuationMode).to.be("None");
                  expect(data.properties.profanityFilterMode).to.be.a('string');
                  expect(data.properties.profanityFilterMode).to.be("None");
                  expect(data.properties.timeToLive).to.be.a('string');
                  expect(data.properties.timeToLive).to.be("");
                  expect(data.properties.email).to.be.a('string');
                  expect(data.properties.email).to.be("");
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                        expect(data.properties.error.code).to.be.a('string');
                    expect(data.properties.error.code).to.be("");
                    expect(data.properties.error.message).to.be.a('string');
                    expect(data.properties.error.message).to.be("");
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");
                expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.model.self).to.be.a('string');
                  expect(data.model.self).to.be("");
                expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.project.self).to.be.a('string');
                  expect(data.project.self).to.be("");
                expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                      expect(data.dataset.self).to.be.a('string');
                  expect(data.dataset.self).to.be("");
                {
                  let dataCtr = data.contentUrls;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.contentContainerUrl).to.be.a('string');
                expect(data.contentContainerUrl).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.locale).to.be.a('string');
                expect(data.locale).to.be("");
                expect(data.lastActionDateTime).to.be.a(Date);
                expect(data.lastActionDateTime).to.be(new Date());
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("NotStarted");
                expect(data.createdDateTime).to.be.a(Date);
                expect(data.createdDateTime).to.be(new Date());

                      }
            }
            expect(data.nextLink).to.be.a('string');
            expect(data.nextLink).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('pingHook', function() {
        it('should call pingHook successfully', function(done) {
          // TODO: uncomment, update parameter values for pingHook call
          /*
          var id = "id_example";

          instance.pingHook(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('testHook', function() {
        it('should call testHook successfully', function(done) {
          // TODO: uncomment, update parameter values for testHook call
          /*
          var id = "id_example";

          instance.testHook(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDataset', function() {
        it('should call updateDataset successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDataset call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.datasetUpdate = new SpeechToTextApiV30.DatasetUpdate();
          opts.datasetUpdate.project = new SpeechToTextApiV30.EntityReference();
          opts.datasetUpdate.project.self = "";
          opts.datasetUpdate.displayName = "";
          opts.datasetUpdate.description = "";
          opts.datasetUpdate.customProperties = {key: ""};

          instance.updateDataset(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Dataset);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("Language");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateEndpoint', function() {
        it('should call updateEndpoint successfully', function(done) {
          // TODO: uncomment, update parameter values for updateEndpoint call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.endpointUpdate = new SpeechToTextApiV30.EndpointUpdate();
          opts.endpointUpdate.model = new SpeechToTextApiV30.EntityReference();
          opts.endpointUpdate.model.self = "";
          opts.endpointUpdate.properties = new SpeechToTextApiV30.EndpointPropertiesUpdate();
          opts.endpointUpdate.properties.contentLoggingEnabled = false;
          opts.endpointUpdate.project = new SpeechToTextApiV30.EntityReference();
          opts.endpointUpdate.project.self = "";
          opts.endpointUpdate.displayName = "";
          opts.endpointUpdate.description = "";
          opts.endpointUpdate.customProperties = {key: ""};

          instance.updateEndpoint(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Endpoint);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.EndpointLinks);
                  expect(data.links.restInteractive).to.be.a('string');
              expect(data.links.restInteractive).to.be("");
              expect(data.links.restConversation).to.be.a('string');
              expect(data.links.restConversation).to.be("");
              expect(data.links.restDictation).to.be.a('string');
              expect(data.links.restDictation).to.be("");
              expect(data.links.webSocketInteractive).to.be.a('string');
              expect(data.links.webSocketInteractive).to.be("");
              expect(data.links.webSocketConversation).to.be.a('string');
              expect(data.links.webSocketConversation).to.be("");
              expect(data.links.webSocketDictation).to.be.a('string');
              expect(data.links.webSocketDictation).to.be("");
              expect(data.links.logs).to.be.a('string');
              expect(data.links.logs).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EndpointProperties);
                  expect(data.properties.loggingEnabled).to.be.a('boolean');
              expect(data.properties.loggingEnabled).to.be(false);
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateEvaluation', function() {
        it('should call updateEvaluation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateEvaluation call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.evaluationUpdate = new SpeechToTextApiV30.EvaluationUpdate();
          opts.evaluationUpdate.project = new SpeechToTextApiV30.EntityReference();
          opts.evaluationUpdate.project.self = "";
          opts.evaluationUpdate.displayName = "";
          opts.evaluationUpdate.description = "";
          opts.evaluationUpdate.customProperties = {key: ""};

          instance.updateEvaluation(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Evaluation);
            expect(data.model1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model1.self).to.be.a('string');
              expect(data.model1.self).to.be("");
            expect(data.model2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model2.self).to.be.a('string');
              expect(data.model2.self).to.be("");
            expect(data.transcription1).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription1.self).to.be.a('string');
              expect(data.transcription1.self).to.be("");
            expect(data.transcription2).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.transcription2.self).to.be.a('string');
              expect(data.transcription2.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.EvaluationProperties);
                  expect(data.properties.wordErrorRate2).to.be.a('number');
              expect(data.properties.wordErrorRate2).to.be(0.0);
              expect(data.properties.wordErrorRate1).to.be.a('number');
              expect(data.properties.wordErrorRate1).to.be(0.0);
              expect(data.properties.sentenceErrorRate2).to.be.a('number');
              expect(data.properties.sentenceErrorRate2).to.be(0.0);
              expect(data.properties.sentenceCount2).to.be.a('number');
              expect(data.properties.sentenceCount2).to.be(0);
              expect(data.properties.wordCount2).to.be.a('number');
              expect(data.properties.wordCount2).to.be(0);
              expect(data.properties.correctWordCount2).to.be.a('number');
              expect(data.properties.correctWordCount2).to.be(0);
              expect(data.properties.wordSubstitutionCount2).to.be.a('number');
              expect(data.properties.wordSubstitutionCount2).to.be(0);
              expect(data.properties.wordDeletionCount2).to.be.a('number');
              expect(data.properties.wordDeletionCount2).to.be(0);
              expect(data.properties.wordInsertionCount2).to.be.a('number');
              expect(data.properties.wordInsertionCount2).to.be(0);
              expect(data.properties.sentenceErrorRate1).to.be.a('number');
              expect(data.properties.sentenceErrorRate1).to.be(0.0);
              expect(data.properties.sentenceCount1).to.be.a('number');
              expect(data.properties.sentenceCount1).to.be(0);
              expect(data.properties.wordCount1).to.be.a('number');
              expect(data.properties.wordCount1).to.be(0);
              expect(data.properties.correctWordCount1).to.be.a('number');
              expect(data.properties.correctWordCount1).to.be(0);
              expect(data.properties.wordSubstitutionCount1).to.be.a('number');
              expect(data.properties.wordSubstitutionCount1).to.be(0);
              expect(data.properties.wordDeletionCount1).to.be.a('number');
              expect(data.properties.wordDeletionCount1).to.be(0);
              expect(data.properties.wordInsertionCount1).to.be.a('number');
              expect(data.properties.wordInsertionCount1).to.be(0);
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateHook', function() {
        it('should call updateHook successfully', function(done) {
          // TODO: uncomment, update parameter values for updateHook call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.webHookUpdate = new SpeechToTextApiV30.WebHookUpdate();
          opts.webHookUpdate.webUrl = "";
          opts.webHookUpdate.properties = new SpeechToTextApiV30.WebHookPropertiesUpdate();
          opts.webHookUpdate.properties.secret = "";
          opts.webHookUpdate.events = ;
          opts.webHookUpdate.displayName = "";
          opts.webHookUpdate.description = "";
          opts.webHookUpdate.customProperties = {key: ""};

          instance.updateHook(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.WebHook);
            expect(data.links).to.be.a(SpeechToTextApiV30.WebHookLinks);
                  expect(data.links.ping).to.be.a('string');
              expect(data.links.ping).to.be("");
              expect(data.links.test).to.be.a('string');
              expect(data.links.test).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.WebHookProperties);
                  expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
              expect(data.properties.apiVersion).to.be.a('string');
              expect(data.properties.apiVersion).to.be("");
              expect(data.properties.secret).to.be.a('string');
              expect(data.properties.secret).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.webUrl).to.be.a('string');
            expect(data.webUrl).to.be("");
            expect(data.events).to.be.a(Object);
            expect(data.events).to.be();
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModel', function() {
        it('should call updateModel successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModel call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.modelUpdate = new SpeechToTextApiV30.ModelUpdate();
          opts.modelUpdate.project = new SpeechToTextApiV30.EntityReference();
          opts.modelUpdate.project.self = "";
          opts.modelUpdate.displayName = "";
          opts.modelUpdate.description = "";
          opts.modelUpdate.customProperties = {key: ""};

          instance.updateModel(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Model);
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.links).to.be.a(SpeechToTextApiV30.ModelLinks);
                  expect(data.links.manifest).to.be.a('string');
              expect(data.links.manifest).to.be("");
              expect(data.links.copyTo).to.be.a('string');
              expect(data.links.copyTo).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ModelProperties);
                  expect(data.properties.deprecationDates).to.be.a(SpeechToTextApiV30.ModelDeprecationDates);
                    expect(data.properties.deprecationDates.adaptationDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.adaptationDateTime).to.be(new Date());
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be.a(Date);
                expect(data.properties.deprecationDates.transcriptionDateTime).to.be(new Date());
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.baseModel).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.baseModel.self).to.be.a('string');
              expect(data.baseModel.self).to.be("");
            {
              let dataCtr = data.datasets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SpeechToTextApiV30.EntityReference);
                expect(data.self).to.be.a('string');
                expect(data.self).to.be("");

                      }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProject', function() {
        it('should call updateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProject call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.projectUpdate = new SpeechToTextApiV30.ProjectUpdate();
          opts.projectUpdate.displayName = "";
          opts.projectUpdate.description = "";
          opts.projectUpdate.customProperties = {key: ""};

          instance.updateProject(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Project);
            expect(data.links).to.be.a(SpeechToTextApiV30.ProjectLinks);
                  expect(data.links.evaluations).to.be.a('string');
              expect(data.links.evaluations).to.be("");
              expect(data.links.datasets).to.be.a('string');
              expect(data.links.datasets).to.be("");
              expect(data.links.models).to.be.a('string');
              expect(data.links.models).to.be("");
              expect(data.links.endpoints).to.be.a('string');
              expect(data.links.endpoints).to.be("");
              expect(data.links.transcriptions).to.be.a('string');
              expect(data.links.transcriptions).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.ProjectProperties);
                  expect(data.properties.datasetCount).to.be.a('number');
              expect(data.properties.datasetCount).to.be(0);
              expect(data.properties.evaluationCount).to.be.a('number');
              expect(data.properties.evaluationCount).to.be(0);
              expect(data.properties.modelCount).to.be.a('number');
              expect(data.properties.modelCount).to.be(0);
              expect(data.properties.transcriptionCount).to.be.a('number');
              expect(data.properties.transcriptionCount).to.be(0);
              expect(data.properties.endpointCount).to.be.a('number');
              expect(data.properties.endpointCount).to.be(0);
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTranscription', function() {
        it('should call updateTranscription successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTranscription call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.transcriptionUpdate = new SpeechToTextApiV30.TranscriptionUpdate();
          opts.transcriptionUpdate.project = new SpeechToTextApiV30.EntityReference();
          opts.transcriptionUpdate.project.self = "";
          opts.transcriptionUpdate.displayName = "";
          opts.transcriptionUpdate.description = "";
          opts.transcriptionUpdate.customProperties = {key: ""};

          instance.updateTranscription(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Transcription);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.TranscriptionProperties);
                  expect(data.properties.diarizationEnabled).to.be.a('boolean');
              expect(data.properties.diarizationEnabled).to.be(false);
              expect(data.properties.wordLevelTimestampsEnabled).to.be.a('boolean');
              expect(data.properties.wordLevelTimestampsEnabled).to.be(false);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              {
                let dataCtr = data.properties.channels;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.properties.destinationContainerUrl).to.be.a('string');
              expect(data.properties.destinationContainerUrl).to.be("");
              expect(data.properties.punctuationMode).to.be.a('string');
              expect(data.properties.punctuationMode).to.be("None");
              expect(data.properties.profanityFilterMode).to.be.a('string');
              expect(data.properties.profanityFilterMode).to.be("None");
              expect(data.properties.timeToLive).to.be.a('string');
              expect(data.properties.timeToLive).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.model).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.model.self).to.be.a('string');
              expect(data.model.self).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.dataset).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.dataset.self).to.be.a('string');
              expect(data.dataset.self).to.be("");
            {
              let dataCtr = data.contentUrls;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.contentContainerUrl).to.be.a('string');
            expect(data.contentContainerUrl).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadDatasetFromForm', function() {
        it('should call uploadDatasetFromForm successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadDatasetFromForm call and complete the assertions
          /*
          var opts = {};
          opts.project = "project_example";
          opts.displayName = "displayName_example";
          opts.description = "description_example";
          opts.locale = "locale_example";
          opts.kind = "kind_example";
          opts.customProperties = "customProperties_example";
          opts.data = "/path/to/file.txt";
          opts.email = "email_example";

          instance.uploadDatasetFromForm(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SpeechToTextApiV30.Dataset);
            expect(data.links).to.be.a(SpeechToTextApiV30.Links);
                  expect(data.links.files).to.be.a('string');
              expect(data.links.files).to.be("");
            expect(data.properties).to.be.a(SpeechToTextApiV30.DatasetProperties);
                  expect(data.properties.acceptedLineCount).to.be.a('number');
              expect(data.properties.acceptedLineCount).to.be(0);
              expect(data.properties.rejectedLineCount).to.be.a('number');
              expect(data.properties.rejectedLineCount).to.be(0);
              expect(data.properties.duration).to.be.a('string');
              expect(data.properties.duration).to.be("");
              expect(data.properties.email).to.be.a('string');
              expect(data.properties.email).to.be("");
              expect(data.properties.error).to.be.a(SpeechToTextApiV30.EntityError);
                    expect(data.properties.error.code).to.be.a('string');
                expect(data.properties.error.code).to.be("");
                expect(data.properties.error.message).to.be.a('string');
                expect(data.properties.error.message).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("Language");
            expect(data.self).to.be.a('string');
            expect(data.self).to.be("");
            expect(data.displayName).to.be.a('string');
            expect(data.displayName).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.project).to.be.a(SpeechToTextApiV30.EntityReference);
                  expect(data.project.self).to.be.a('string');
              expect(data.project.self).to.be("");
            expect(data.contentUrl).to.be.a('string');
            expect(data.contentUrl).to.be("");
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.locale).to.be.a('string');
            expect(data.locale).to.be("");
            expect(data.lastActionDateTime).to.be.a(Date);
            expect(data.lastActionDateTime).to.be(new Date());
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("NotStarted");
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
