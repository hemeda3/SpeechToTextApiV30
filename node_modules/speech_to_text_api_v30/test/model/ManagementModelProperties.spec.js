/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechToTextApiV30);
  }
}(this, function(expect, SpeechToTextApiV30) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ManagementModelProperties', function() {
      beforeEach(function() {
        instance = new SpeechToTextApiV30.ManagementModelProperties();
      });

      it('should create an instance of ManagementModelProperties', function() {
        // TODO: update the code to test ManagementModelProperties
        expect(instance).to.be.a(SpeechToTextApiV30.ManagementModelProperties);
      });

      it('should have the property purposes (base name: "purposes")', function() {
        // TODO: update the code to test the property purposes
        expect(instance).to.have.property('purposes');
        // expect(instance.purposes).to.be(expectedValueLiteral);
      });

      it('should have the property modelClass (base name: "modelClass")', function() {
        // TODO: update the code to test the property modelClass
        expect(instance).to.have.property('modelClass');
        // expect(instance.modelClass).to.be(expectedValueLiteral);
      });

      it('should have the property vadKind (base name: "vadKind")', function() {
        // TODO: update the code to test the property vadKind
        expect(instance).to.have.property('vadKind');
        // expect(instance.vadKind).to.be(expectedValueLiteral);
      });

      it('should have the property usesOnlineInterpolation (base name: "usesOnlineInterpolation")', function() {
        // TODO: update the code to test the property usesOnlineInterpolation
        expect(instance).to.have.property('usesOnlineInterpolation');
        // expect(instance.usesOnlineInterpolation).to.be(expectedValueLiteral);
      });

      it('should have the property cascadeDelete (base name: "cascadeDelete")', function() {
        // TODO: update the code to test the property cascadeDelete
        expect(instance).to.have.property('cascadeDelete');
        // expect(instance.cascadeDelete).to.be(expectedValueLiteral);
      });

      it('should have the property isDynamicGrammarSupported (base name: "isDynamicGrammarSupported")', function() {
        // TODO: update the code to test the property isDynamicGrammarSupported
        expect(instance).to.have.property('isDynamicGrammarSupported');
        // expect(instance.isDynamicGrammarSupported).to.be(expectedValueLiteral);
      });

      it('should have the property usesHalide (base name: "usesHalide")', function() {
        // TODO: update the code to test the property usesHalide
        expect(instance).to.have.property('usesHalide');
        // expect(instance.usesHalide).to.be(expectedValueLiteral);
      });

    });
  });

}));
