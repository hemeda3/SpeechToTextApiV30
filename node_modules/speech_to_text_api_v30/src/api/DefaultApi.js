/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse', 'model/ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse', 'model/ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse', 'model/ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse', 'model/ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse', 'model/ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse', 'model/Dataset', 'model/DatasetUpdate', 'model/Endpoint', 'model/EndpointUpdate', 'model/Error', 'model/Evaluation', 'model/EvaluationUpdate', 'model/HealthStatus', 'model/Model', 'model/ModelCopy', 'model/ModelManifest', 'model/ModelUpdate', 'model/PaginatedDatasets', 'model/PaginatedEndpoints', 'model/PaginatedEvaluations', 'model/PaginatedFiles', 'model/PaginatedModels', 'model/PaginatedProjects', 'model/PaginatedTranscriptions', 'model/PaginatedWebHooks', 'model/Project', 'model/ProjectUpdate', 'model/Transcription', 'model/TranscriptionUpdate', 'model/WebHook', 'model/WebHookUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse'), require('../model/ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse'), require('../model/ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse'), require('../model/ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse'), require('../model/ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse'), require('../model/ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse'), require('../model/Dataset'), require('../model/DatasetUpdate'), require('../model/Endpoint'), require('../model/EndpointUpdate'), require('../model/Error'), require('../model/Evaluation'), require('../model/EvaluationUpdate'), require('../model/HealthStatus'), require('../model/Model'), require('../model/ModelCopy'), require('../model/ModelManifest'), require('../model/ModelUpdate'), require('../model/PaginatedDatasets'), require('../model/PaginatedEndpoints'), require('../model/PaginatedEvaluations'), require('../model/PaginatedFiles'), require('../model/PaginatedModels'), require('../model/PaginatedProjects'), require('../model/PaginatedTranscriptions'), require('../model/PaginatedWebHooks'), require('../model/Project'), require('../model/ProjectUpdate'), require('../model/Transcription'), require('../model/TranscriptionUpdate'), require('../model/WebHook'), require('../model/WebHookUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.SpeechToTextApiV30) {
      root.SpeechToTextApiV30 = {};
    }
    root.SpeechToTextApiV30.DefaultApi = factory(root.SpeechToTextApiV30.ApiClient, root.SpeechToTextApiV30.ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse, root.SpeechToTextApiV30.Dataset, root.SpeechToTextApiV30.DatasetUpdate, root.SpeechToTextApiV30.Endpoint, root.SpeechToTextApiV30.EndpointUpdate, root.SpeechToTextApiV30.Error, root.SpeechToTextApiV30.Evaluation, root.SpeechToTextApiV30.EvaluationUpdate, root.SpeechToTextApiV30.HealthStatus, root.SpeechToTextApiV30.Model, root.SpeechToTextApiV30.ModelCopy, root.SpeechToTextApiV30.ModelManifest, root.SpeechToTextApiV30.ModelUpdate, root.SpeechToTextApiV30.PaginatedDatasets, root.SpeechToTextApiV30.PaginatedEndpoints, root.SpeechToTextApiV30.PaginatedEvaluations, root.SpeechToTextApiV30.PaginatedFiles, root.SpeechToTextApiV30.PaginatedModels, root.SpeechToTextApiV30.PaginatedProjects, root.SpeechToTextApiV30.PaginatedTranscriptions, root.SpeechToTextApiV30.PaginatedWebHooks, root.SpeechToTextApiV30.Project, root.SpeechToTextApiV30.ProjectUpdate, root.SpeechToTextApiV30.Transcription, root.SpeechToTextApiV30.TranscriptionUpdate, root.SpeechToTextApiV30.WebHook, root.SpeechToTextApiV30.WebHookUpdate);
  }
}(this, function(ApiClient, ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse, ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse, ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse, ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse, ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse, ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse, Dataset, DatasetUpdate, Endpoint, EndpointUpdate, Error, Evaluation, EvaluationUpdate, HealthStatus, Model, ModelCopy, ModelManifest, ModelUpdate, PaginatedDatasets, PaginatedEndpoints, PaginatedEvaluations, PaginatedFiles, PaginatedModels, PaginatedProjects, PaginatedTranscriptions, PaginatedWebHooks, Project, ProjectUpdate, Transcription, TranscriptionUpdate, WebHook, WebHookUpdate) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version v3.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the copyModelToSubscription operation.
     * @callback module:api/DefaultApi~copyModelToSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Model
     * This method can be used to copy a model from one location to another. If the target subscription  key belongs to a subscription created for another location, the model will be copied to that location.  Only adapted models are allowed to copy to another subscription.
     * @param {String} id Format - uuid. The identifier of the model that will be copied.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelCopy} opts.modelCopy The body contains the subscription key of the target subscription.
     * @param {module:api/DefaultApi~copyModelToSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.copyModelToSubscription = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['modelCopy'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copyModelToSubscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/models/{id}/copyto', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DefaultApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Dataset
     * Uploads and creates a new dataset by getting the data from a specified URL.
     * @param {Object} opts Optional parameters
     * @param {module:model/Dataset} opts.dataset Definition for the new dataset.
     * @param {module:api/DefaultApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.createDataset = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['dataset'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEndpoint operation.
     * @callback module:api/DefaultApi~createEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Endpoint
     * Creates a new endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/Endpoint} opts.endpoint The details of the endpoint.
     * @param {module:api/DefaultApi~createEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.createEndpoint = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['endpoint'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEvaluation operation.
     * @callback module:api/DefaultApi~createEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Evaluation
     * Creates a new evaluation.
     * @param {Object} opts Optional parameters
     * @param {module:model/Evaluation} opts.evaluation The details of the new evaluation.
     * @param {module:api/DefaultApi~createEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.createEvaluation = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['evaluation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createHook operation.
     * @callback module:api/DefaultApi~createHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Web Hook
     * If the property secret in the configuration is present and contains a non-empty string, it will be used to create a SHA256 hash of the payload with  the secret as HMAC key. This hash will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.                When calling back into the registered URL, the request will contain a X-MicrosoftSpeechServices-Event header containing one of the registered event  types. There will be one request per registered event type.                After successfully registering the web hook, it will not be usable until a challenge/response is completed. To do this, a request with the event type  challenge will be made with a query parameter called validationToken. Respond to the challenge with a 200 OK containing the value of the validationToken  query parameter as the response body. When the challenge/response is successfully completed, the web hook will begin receiving events.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebHook} opts.webHook The details of the new web hook.
     * @param {module:api/DefaultApi~createHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    this.createHook = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['webHook'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModel operation.
     * @callback module:api/DefaultApi~createModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Model
     * Creates a new model.
     * @param {Object} opts Optional parameters
     * @param {module:model/Model} opts.model The details of the new model.
     * @param {module:api/DefaultApi~createModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.createModel = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['model'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/models', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project
     * Creates a new project.
     * @param {Object} opts Optional parameters
     * @param {module:model/Project} opts.project The details of the project.
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.createProject = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['project'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTranscription operation.
     * @callback module:api/DefaultApi~createTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Transcription
     * Creates a new transcription.
     * @param {Object} opts Optional parameters
     * @param {module:model/Transcription} opts.transcription The details of the new transcription.
     * @param {module:api/DefaultApi~createTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.createTranscription = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['transcription'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBaseModelLog operation.
     * @callback module:api/DefaultApi~deleteBaseModelLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Base Model Endpoint Log
     * Deletes one audio or transcription log that have been stored when using the default base model of a given language.
     * @param {String} locale The language used to select the default base model.
     * @param {String} logId The identifier of the log.
     * @param {module:api/DefaultApi~deleteBaseModelLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBaseModelLog = function(locale, logId, callback) {
      var postBody = null;

      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling deleteBaseModelLog");
      }

      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling deleteBaseModelLog");
      }


      var pathParams = {
        'locale': locale,
        'logId': logId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/base/{locale}/files/logs/{logId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBaseModelLogs operation.
     * @callback module:api/DefaultApi~deleteBaseModelLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Base Model Endpoint Logs
     * Deletion process is done asynchronously and can take up to one day depending on the amount of log files.
     * @param {String} locale The language used to select the default base model.
     * @param {Object} opts Optional parameters
     * @param {String} opts.endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \"yyyy-mm-dd\". for instance, \"2019-09-20\" results in deleting all logs on September 20h, 2019 and before.              Deletes all existing logs when date is not specified.
     * @param {module:api/DefaultApi~deleteBaseModelLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBaseModelLogs = function(locale, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling deleteBaseModelLogs");
      }


      var pathParams = {
        'locale': locale
      };
      var queryParams = {
        'endDate': opts['endDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/base/{locale}/files/logs', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DefaultApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Dataset
     * Deletes the specified dataset.
     * @param {String} id Format - uuid. The identifier of the dataset.
     * @param {module:api/DefaultApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDataset = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDataset");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datasets/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpoint operation.
     * @callback module:api/DefaultApi~deleteEndpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Endpoint
     * Deletes the endpoint identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {module:api/DefaultApi~deleteEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEndpoint = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEndpoint");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpointLog operation.
     * @callback module:api/DefaultApi~deleteEndpointLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Model Endpoint Log
     * Deletes one audio or transcription log that have been stored for a given endpoint.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {String} logId The identifier of the log.
     * @param {module:api/DefaultApi~deleteEndpointLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEndpointLog = function(id, logId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEndpointLog");
      }

      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling deleteEndpointLog");
      }


      var pathParams = {
        'id': id,
        'logId': logId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/files/logs/{logId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpointLogs operation.
     * @callback module:api/DefaultApi~deleteEndpointLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Custom Model Endpoint Logs
     * The deletion process is done asynchronously and can take up to one day depending on the amount of log files.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} opts.endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \"yyyy-mm-dd\". for instance, \"2019-09-20\" results in deleting all logs on September 20h, 2019 and before.              Deletes all existing logs when date is not specified.
     * @param {module:api/DefaultApi~deleteEndpointLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEndpointLogs = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEndpointLogs");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'endDate': opts['endDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}/files/logs', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvaluation operation.
     * @callback module:api/DefaultApi~deleteEvaluationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Evaluation
     * Deletes the evaluation identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the evaluation.
     * @param {module:api/DefaultApi~deleteEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEvaluation = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEvaluation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHook operation.
     * @callback module:api/DefaultApi~deleteHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Web Hook
     * Deletes the web hook registration identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the web hook.
     * @param {module:api/DefaultApi~deleteHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteHook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Model
     * Deletes the model identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the model.
     * @param {module:api/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/models/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Project
     * Deletes the project identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscription operation.
     * @callback module:api/DefaultApi~deleteTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Transcription
     * Deletes the specified transcription task.
     * @param {String} id Format - uuid. The identifier of the transcription.
     * @param {module:api/DefaultApi~deleteTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTranscription = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTranscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseModel operation.
     * @callback module:api/DefaultApi~getBaseModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Base Model
     * Gets the base model identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the base model.
     * @param {module:api/DefaultApi~getBaseModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.getBaseModel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBaseModel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/models/base/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseModelLog operation.
     * @callback module:api/DefaultApi~getBaseModelLogCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Base Model Endpoint Log
     * Gets a specific audio or transcription log for the default base model in a given language.
     * @param {String} locale The language used to select the default base model.
     * @param {String} logId The identifier of the log.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getBaseModelLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getBaseModelLog = function(locale, logId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling getBaseModelLog");
      }

      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling getBaseModelLog");
      }


      var pathParams = {
        'locale': locale,
        'logId': logId
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/endpoints/base/{locale}/files/logs/{logId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseModelLogs operation.
     * @callback module:api/DefaultApi~getBaseModelLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Base Model Endpoint Logs
     * Gets the list of audio and transcription logs that have been stored when using the default base model of a given language.
     * @param {String} locale The language used to select the default base model.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {String} opts.skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined.
     * @param {Number} opts.top Format - int32. Number of files that will be included (between 1 and 5000).
     * @param {module:api/DefaultApi~getBaseModelLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.getBaseModelLogs = function(locale, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locale' is set
      if (locale === undefined || locale === null) {
        throw new Error("Missing the required parameter 'locale' when calling getBaseModelLogs");
      }


      var pathParams = {
        'locale': locale
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
        'skipToken': opts['skipToken'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/endpoints/base/{locale}/files/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseModelManifest operation.
     * @callback module:api/DefaultApi~getBaseModelManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Base Model Manifest
     * Returns an manifest for this base model which can be used in an on-premise container.
     * @param {String} id Format - uuid. The ID of the model to generate a manifest for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getBaseModelManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelManifest}
     */
    this.getBaseModelManifest = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBaseModelManifest");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelManifest;

      return this.apiClient.callApi(
        '/models/base/{id}/manifest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaseModels operation.
     * @callback module:api/DefaultApi~getBaseModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedModels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Base Models
     * Gets the list of base models for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of base models that will be skipped.
     * @param {Number} opts.top Format - int32. Number of base models that will be included after skipping.
     * @param {module:api/DefaultApi~getBaseModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedModels}
     */
    this.getBaseModels = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedModels;

      return this.apiClient.callApi(
        '/models/base', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataset operation.
     * @callback module:api/DefaultApi~getDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dataset
     * Gets the dataset identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the dataset.
     * @param {module:api/DefaultApi~getDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.getDataset = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDataset");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetFile operation.
     * @callback module:api/DefaultApi~getDatasetFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dataset File
     * Gets one specific file (identified with fileId) from a dataset (identified with id).
     * @param {String} id Format - uuid. The identifier of the dataset.
     * @param {String} fileId Format - uuid. The identifier of the file.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getDatasetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getDatasetFile = function(id, fileId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatasetFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getDatasetFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/datasets/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetFiles operation.
     * @callback module:api/DefaultApi~getDatasetFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dataset Files
     * Gets the files of the dataset identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the dataset.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {Number} opts.skip Format - int32. Number of files that will be skipped.
     * @param {Number} opts.top Format - int32. Number of files that will be included after skipping.
     * @param {module:api/DefaultApi~getDatasetFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.getDatasetFiles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatasetFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/datasets/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasets operation.
     * @callback module:api/DefaultApi~getDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDatasets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Datasets
     * Gets a list of datasets for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of datasets that will be skipped.
     * @param {Number} opts.top Format - int32. Number of datasets that will be included after skipping.
     * @param {module:api/DefaultApi~getDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDatasets}
     */
    this.getDatasets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedDatasets;

      return this.apiClient.callApi(
        '/datasets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetsForProject operation.
     * @callback module:api/DefaultApi~getDatasetsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDatasets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Datasets for Project
     * Gets the list of datasets for specified project.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of datasets that will be skipped.
     * @param {Number} opts.top Format - int32. Number of datasets that will be included after skipping.
     * @param {module:api/DefaultApi~getDatasetsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDatasets}
     */
    this.getDatasetsForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatasetsForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedDatasets;

      return this.apiClient.callApi(
        '/projects/{id}/datasets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpoint operation.
     * @callback module:api/DefaultApi~getEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint
     * Gets the endpoint identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {module:api/DefaultApi~getEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.getEndpoint = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEndpoint");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointLog operation.
     * @callback module:api/DefaultApi~getEndpointLogCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Model Endpoint Log
     * Gets a specific audio or transcription log for a given endpoint.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {String} logId The identifier of the log.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getEndpointLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getEndpointLog = function(id, logId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEndpointLog");
      }

      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling getEndpointLog");
      }


      var pathParams = {
        'id': id,
        'logId': logId
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/endpoints/{id}/files/logs/{logId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointLogs operation.
     * @callback module:api/DefaultApi~getEndpointLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Model Endpoint Logs
     * Gets the list of audio and transcription logs that have been stored for a given endpoint.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {String} opts.skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined.
     * @param {Number} opts.top Format - int32. Number of files that will be included (between 1 and 5000).
     * @param {module:api/DefaultApi~getEndpointLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.getEndpointLogs = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEndpointLogs");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
        'skipToken': opts['skipToken'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/endpoints/{id}/files/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpoints operation.
     * @callback module:api/DefaultApi~getEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEndpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoints
     * Gets the list of endpoints for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of endpoints that will be skipped.
     * @param {Number} opts.top Format - int32. Number of endpoints that will be included after skipping.
     * @param {module:api/DefaultApi~getEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEndpoints}
     */
    this.getEndpoints = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEndpoints;

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointsForProject operation.
     * @callback module:api/DefaultApi~getEndpointsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEndpoints} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoints for Project
     * Gets the list of endpoints for specified project.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of endpoints that will be skipped.
     * @param {Number} opts.top Format - int32. Number of endpoints that will be included after skipping.
     * @param {module:api/DefaultApi~getEndpointsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEndpoints}
     */
    this.getEndpointsForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEndpointsForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEndpoints;

      return this.apiClient.callApi(
        '/projects/{id}/endpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluation operation.
     * @callback module:api/DefaultApi~getEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Evaluation
     * Gets the evaluation identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the evaluation.
     * @param {module:api/DefaultApi~getEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.getEvaluation = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvaluation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluationFile operation.
     * @callback module:api/DefaultApi~getEvaluationFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Evaluation File
     * Gets one specific file (identified with fileId) from an evaluation (identified with id).
     * @param {String} id Format - uuid. The identifier of the evaluation.
     * @param {String} fileId Format - uuid. The identifier of the file.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getEvaluationFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getEvaluationFile = function(id, fileId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvaluationFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getEvaluationFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/evaluations/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluationFiles operation.
     * @callback module:api/DefaultApi~getEvaluationFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Evaluation Files
     * Gets the files of the evaluation identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the evaluation.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {Number} opts.skip Format - int32. Number of files that will be skipped.
     * @param {Number} opts.top Format - int32. Number of files that will be included after skipping.
     * @param {module:api/DefaultApi~getEvaluationFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.getEvaluationFiles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvaluationFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/evaluations/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluations operation.
     * @callback module:api/DefaultApi~getEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEvaluations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Evaluations
     * Gets the list of evaluations for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of evaluations that will be skipped.
     * @param {Number} opts.top Format - int32. Number of evaluations that will be included after skipping.
     * @param {module:api/DefaultApi~getEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEvaluations}
     */
    this.getEvaluations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEvaluations;

      return this.apiClient.callApi(
        '/evaluations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluationsForProject operation.
     * @callback module:api/DefaultApi~getEvaluationsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEvaluations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Evaluations for Project
     * Gets the list of evaluations for specified project.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of evaluations that will be skipped.
     * @param {Number} opts.top Format - int32. Number of evaluations that will be included after skipping.
     * @param {module:api/DefaultApi~getEvaluationsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEvaluations}
     */
    this.getEvaluationsForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvaluationsForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedEvaluations;

      return this.apiClient.callApi(
        '/projects/{id}/evaluations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHealthStatus operation.
     * @callback module:api/DefaultApi~getHealthStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Health Status
     * Returns the overall health of the service and optionally of the different subcomponents.
     * @param {module:api/DefaultApi~getHealthStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthStatus}
     */
    this.getHealthStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HealthStatus;

      return this.apiClient.callApi(
        '/healthstatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHook operation.
     * @callback module:api/DefaultApi~getHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Web Hook
     * Gets the web hook registration identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the web hook.
     * @param {module:api/DefaultApi~getHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    this.getHook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHooks operation.
     * @callback module:api/DefaultApi~getHooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWebHooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Web Hooks
     * Gets the list of web hook registrations for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of hooks that will be skipped.
     * @param {Number} opts.top Format - int32. Number of hooks that will be included after skipping.
     * @param {module:api/DefaultApi~getHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWebHooks}
     */
    this.getHooks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedWebHooks;

      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModel operation.
     * @callback module:api/DefaultApi~getModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Model
     * Gets the model identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the model.
     * @param {module:api/DefaultApi~getModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.getModel = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/models/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelManifest operation.
     * @callback module:api/DefaultApi~getModelManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Model Manifest
     * Returns an manifest for this model which can be used in an on-premise container.
     * @param {String} id Format - uuid. The ID of the model to generate a manifest for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getModelManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelManifest}
     */
    this.getModelManifest = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelManifest");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelManifest;

      return this.apiClient.callApi(
        '/models/{id}/manifest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModels operation.
     * @callback module:api/DefaultApi~getModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedModels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Custom Models
     * Gets the list of custom models for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of models that will be skipped.
     * @param {Number} opts.top Format - int32. Number of models that will be included after skipping.
     * @param {module:api/DefaultApi~getModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedModels}
     */
    this.getModels = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedModels;

      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelsForProject operation.
     * @callback module:api/DefaultApi~getModelsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedModels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Models for Project
     * Gets the list of models for specified project.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of models that will be skipped.
     * @param {Number} opts.top Format - int32. Number of models that will be included after skipping.
     * @param {module:api/DefaultApi~getModelsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedModels}
     */
    this.getModelsForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelsForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedModels;

      return this.apiClient.callApi(
        '/projects/{id}/models', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/DefaultApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project
     * Gets the project identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {module:api/DefaultApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.getProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/DefaultApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Projects
     * Gets the list of projects for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of projects that will be skipped.
     * @param {Number} opts.top Format - int32. Number of projects that will be included after skipping.
     * @param {module:api/DefaultApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedProjects}
     */
    this.getProjects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedProjects;

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedLocalesForDatasets operation.
     * @callback module:api/DefaultApi~getSupportedLocalesForDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Datasets
     * Gets a list of supported locales for data imports.
     * @param {module:api/DefaultApi~getSupportedLocalesForDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedLocalesForDatasets = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30DatasetsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/datasets/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedLocalesForEndpoints operation.
     * @callback module:api/DefaultApi~getSupportedLocalesForEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Endpoints
     * Gets a list of supported locales for endpoint creations.
     * @param {module:api/DefaultApi~getSupportedLocalesForEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedLocalesForEndpoints = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30EndpointsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/endpoints/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedLocalesForEvaluations operation.
     * @callback module:api/DefaultApi~getSupportedLocalesForEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Evaluations
     * Gets a list of supported locales for evaluations.
     * @param {module:api/DefaultApi~getSupportedLocalesForEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedLocalesForEvaluations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30EvaluationsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/evaluations/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedLocalesForModels operation.
     * @callback module:api/DefaultApi~getSupportedLocalesForModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Models
     * Gets a list of supported locales for model adaptation.
     * @param {module:api/DefaultApi~getSupportedLocalesForModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedLocalesForModels = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30ModelsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/models/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedLocalesForTranscriptions operation.
     * @callback module:api/DefaultApi~getSupportedLocalesForTranscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Transcriptions
     * Gets a list of supported locales for offline transcriptions.
     * @param {module:api/DefaultApi~getSupportedLocalesForTranscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedLocalesForTranscriptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30TranscriptionsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/transcriptions/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedProjectLocales operation.
     * @callback module:api/DefaultApi~getSupportedProjectLocalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supported Locales for Projects
     * Gets the list of supported locales.
     * @param {module:api/DefaultApi~getSupportedProjectLocalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse}
     */
    this.getSupportedProjectLocales = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiSpeechtotextV30ProjectsLocalesGet200ApplicationJsonResponse;

      return this.apiClient.callApi(
        '/projects/locales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscription operation.
     * @callback module:api/DefaultApi~getTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transcription
     * Gets the transcription identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the transcription.
     * @param {module:api/DefaultApi~getTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.getTranscription = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTranscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptionFile operation.
     * @callback module:api/DefaultApi~getTranscriptionFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transcription File
     * Gets one specific file (identified with fileId) from a transcription (identified with id).
     * @param {String} id Format - uuid. The identifier of the transcription.
     * @param {String} fileId Format - uuid. The identifier of the file.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {module:api/DefaultApi~getTranscriptionFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getTranscriptionFile = function(id, fileId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTranscriptionFile");
      }

      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getTranscriptionFile");
      }


      var pathParams = {
        'id': id,
        'fileId': fileId
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/transcriptions/{id}/files/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptionFiles operation.
     * @callback module:api/DefaultApi~getTranscriptionFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transcription Files
     * Gets the files of the transcription identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the transcription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.sasValidityInSeconds Format - int32. The duration in seconds that an SAS url should be valid. The default duration is 12 hours.
     * @param {Number} opts.skip Format - int32. Number of files that will be skipped.
     * @param {Number} opts.top Format - int32. Number of files that will be included after skipping.
     * @param {module:api/DefaultApi~getTranscriptionFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFiles}
     */
    this.getTranscriptionFiles = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTranscriptionFiles");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sasValidityInSeconds': opts['sasValidityInSeconds'],
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedFiles;

      return this.apiClient.callApi(
        '/transcriptions/{id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptions operation.
     * @callback module:api/DefaultApi~getTranscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTranscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transcriptions
     * Gets a list of transcriptions for the authenticated subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of transcriptions that will be skipped.
     * @param {Number} opts.top Format - int32. Number of transcriptions that will be included after skipping.
     * @param {module:api/DefaultApi~getTranscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTranscriptions}
     */
    this.getTranscriptions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedTranscriptions;

      return this.apiClient.callApi(
        '/transcriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptionsForProject operation.
     * @callback module:api/DefaultApi~getTranscriptionsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTranscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transcriptions for Project
     * Gets the list of transcriptions for specified project.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Format - int32. Number of transcriptions that will be skipped.
     * @param {Number} opts.top Format - int32. Number of transcriptions that will be included after skipping.
     * @param {module:api/DefaultApi~getTranscriptionsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTranscriptions}
     */
    this.getTranscriptionsForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTranscriptionsForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'skip': opts['skip'],
        'top': opts['top'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaginatedTranscriptions;

      return this.apiClient.callApi(
        '/projects/{id}/transcriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pingHook operation.
     * @callback module:api/DefaultApi~pingHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping Web Hook
     * The request body of the POST request sent to the registered web hook URL is of the same shape as in the GET request for a specific hook.  The Swagger Schema ID of the model is WebHookV3.                The request will contain a X-MicrosoftSpeechServices-Event header with the value ping. If the web hook was registered with  a secret it will contain a X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the payload with  the secret as HMAC key. The hash is base64 encoded.
     * @param {String} id Format - uuid. The identifier of the web hook to ping.
     * @param {module:api/DefaultApi~pingHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.pingHook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pingHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhooks/{id}/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testHook operation.
     * @callback module:api/DefaultApi~testHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Web Hook
     * The payload will be generated from the last entity that would have invoked the web hook. If no entity is present for none of the registered event types,  the POST will respond with 204. If a test request can be made, it will respond with 200.  The request will contain a X-MicrosoftSpeechServices-Event header with the respective registered event type.  If the web hook was registered with a secret it will contain a X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the payload with  the secret as HMAC key. The hash is base64 encoded.
     * @param {String} id Format - uuid. The identifier of the web hook to ping.
     * @param {module:api/DefaultApi~testHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.testHook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhooks/{id}/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataset operation.
     * @callback module:api/DefaultApi~updateDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Dataset
     * Updates the mutable details of the dataset identified by its ID.
     * @param {String} id Format - uuid. The identifier of the dataset.
     * @param {Object} opts Optional parameters
     * @param {module:model/DatasetUpdate} opts.datasetUpdate The updated values for the dataset.
     * @param {module:api/DefaultApi~updateDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.updateDataset = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['datasetUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDataset");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpoint operation.
     * @callback module:api/DefaultApi~updateEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Endpoint
     * Updates the metadata of the endpoint identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/EndpointUpdate} opts.endpointUpdate The updated values for the endpoint.
     * @param {module:api/DefaultApi~updateEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    this.updateEndpoint = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['endpointUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEndpoint");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEvaluation operation.
     * @callback module:api/DefaultApi~updateEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Evaluation
     * Updates the mutable details of the evaluation identified by its id.
     * @param {String} id Format - uuid. The identifier of the evaluation.
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluationUpdate} opts.evaluationUpdate The object containing the updated fields of the evaluation.
     * @param {module:api/DefaultApi~updateEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluation}
     */
    this.updateEvaluation = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['evaluationUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEvaluation");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Evaluation;

      return this.apiClient.callApi(
        '/evaluations/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHook operation.
     * @callback module:api/DefaultApi~updateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Web Hook
     * If the property secret in the configuration is omitted or contains an empty string, future callbacks won't contain X-MicrosoftSpeechServices-Signature  headers. If the property contains a non-empty string, it will be used to create a SHA256 hash of the payload with the secret as HMAC key. This hash  will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.                If the URL changes,  the web hook will stop receiving events until a  challenge/response is completed. To do this, a request with the event type challenge will be made with a query parameter called validationToken.  Respond to the challenge with a 200 OK containing the value of the validationToken query parameter as the response body. When the challenge/response  is successfully completed, the web hook will begin receiving events.
     * @param {String} id Format - uuid. The identifier of the web hook.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebHookUpdate} opts.webHookUpdate The updated values for the web hook.
     * @param {module:api/DefaultApi~updateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    this.updateHook = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['webHookUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/webhooks/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModel operation.
     * @callback module:api/DefaultApi~updateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Model
     * Updates the metadata of the model identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the model.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelUpdate} opts.modelUpdate The updated values for the model.
     * @param {module:api/DefaultApi~updateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.updateModel = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['modelUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModel");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/models/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project
     * Updates the project identified by the given ID.
     * @param {String} id Format - uuid. The identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectUpdate} opts.projectUpdate The updated values for the project.
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.updateProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['projectUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranscription operation.
     * @callback module:api/DefaultApi~updateTranscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transcription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Transcription
     * Updates the mutable details of the transcription identified by its ID.
     * @param {String} id Format - uuid. The identifier of the transcription.
     * @param {Object} opts Optional parameters
     * @param {module:model/TranscriptionUpdate} opts.transcriptionUpdate The updated values for the transcription.
     * @param {module:api/DefaultApi~updateTranscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transcription}
     */
    this.updateTranscription = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['transcriptionUpdate'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTranscription");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['application/json', 'application/merge-patch+json'];
      var accepts = ['application/json'];
      var returnType = Transcription;

      return this.apiClient.callApi(
        '/transcriptions/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDatasetFromForm operation.
     * @callback module:api/DefaultApi~uploadDatasetFromFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Dataset from Form
     * Uploads data and creates a new dataset.
     * @param {Object} opts Optional parameters
     * @param {String} opts.project The optional string representation of the url of a project. If set, the dataset will be associated with that project.
     * @param {String} opts.displayName The name of this data import (required).
     * @param {String} opts.description Optional description of this data import.
     * @param {String} opts.locale The locale of this data import (required).
     * @param {module:model/String} opts.kind The kind of the data import (required).
     * @param {String} opts.customProperties The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.
     * @param {File} opts.data For acoustic data imports, a zip file containing the audio data and a text file containing the transcriptions for the audio data. for language data imports, a text file containing the language or pronunciation data. Required in both cases.
     * @param {String} opts.email An optional string containing the email address to send email notifications to in case the operation completes. The value will be removed after successfully sending the email.
     * @param {module:api/DefaultApi~uploadDatasetFromFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    this.uploadDatasetFromForm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'project': opts['project'],
        'displayName': opts['displayName'],
        'description': opts['description'],
        'locale': opts['locale'],
        'kind': opts['kind'],
        'customProperties': opts['customProperties'],
        'data': opts['data'],
        'email': opts['email']
      };

      var authNames = ['apiKeyHeader', 'apiKeyQuery'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Dataset;

      return this.apiClient.callApi(
        '/datasets/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
